// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_config_2eproto__INCLUDED
#define PROTOBUF_config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dmlc {
namespace linear {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_2eproto();
void protobuf_AssignDesc_config_2eproto();
void protobuf_ShutdownFile_config_2eproto();

class Config;

enum Config_Loss {
  Config_Loss_SQUARE = 1,
  Config_Loss_LOGIT = 2,
  Config_Loss_SQUARE_HINGE = 4
};
bool Config_Loss_IsValid(int value);
const Config_Loss Config_Loss_Loss_MIN = Config_Loss_SQUARE;
const Config_Loss Config_Loss_Loss_MAX = Config_Loss_SQUARE_HINGE;
const int Config_Loss_Loss_ARRAYSIZE = Config_Loss_Loss_MAX + 1;

const ::google::protobuf::EnumDescriptor* Config_Loss_descriptor();
inline const ::std::string& Config_Loss_Name(Config_Loss value) {
  return ::google::protobuf::internal::NameOfEnum(
    Config_Loss_descriptor(), value);
}
inline bool Config_Loss_Parse(
    const ::std::string& name, Config_Loss* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_Loss>(
    Config_Loss_descriptor(), name, value);
}
enum Config_Algo {
  Config_Algo_SGD = 1,
  Config_Algo_ADAGRAD = 2,
  Config_Algo_FTRL = 3
};
bool Config_Algo_IsValid(int value);
const Config_Algo Config_Algo_Algo_MIN = Config_Algo_SGD;
const Config_Algo Config_Algo_Algo_MAX = Config_Algo_FTRL;
const int Config_Algo_Algo_ARRAYSIZE = Config_Algo_Algo_MAX + 1;

const ::google::protobuf::EnumDescriptor* Config_Algo_descriptor();
inline const ::std::string& Config_Algo_Name(Config_Algo value) {
  return ::google::protobuf::internal::NameOfEnum(
    Config_Algo_descriptor(), value);
}
inline bool Config_Algo_Parse(
    const ::std::string& name, Config_Algo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_Algo>(
    Config_Algo_descriptor(), name, value);
}
// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Config_Loss Loss;
  static const Loss SQUARE = Config_Loss_SQUARE;
  static const Loss LOGIT = Config_Loss_LOGIT;
  static const Loss SQUARE_HINGE = Config_Loss_SQUARE_HINGE;
  static inline bool Loss_IsValid(int value) {
    return Config_Loss_IsValid(value);
  }
  static const Loss Loss_MIN =
    Config_Loss_Loss_MIN;
  static const Loss Loss_MAX =
    Config_Loss_Loss_MAX;
  static const int Loss_ARRAYSIZE =
    Config_Loss_Loss_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Loss_descriptor() {
    return Config_Loss_descriptor();
  }
  static inline const ::std::string& Loss_Name(Loss value) {
    return Config_Loss_Name(value);
  }
  static inline bool Loss_Parse(const ::std::string& name,
      Loss* value) {
    return Config_Loss_Parse(name, value);
  }

  typedef Config_Algo Algo;
  static const Algo SGD = Config_Algo_SGD;
  static const Algo ADAGRAD = Config_Algo_ADAGRAD;
  static const Algo FTRL = Config_Algo_FTRL;
  static inline bool Algo_IsValid(int value) {
    return Config_Algo_IsValid(value);
  }
  static const Algo Algo_MIN =
    Config_Algo_Algo_MIN;
  static const Algo Algo_MAX =
    Config_Algo_Algo_MAX;
  static const int Algo_ARRAYSIZE =
    Config_Algo_Algo_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Algo_descriptor() {
    return Config_Algo_descriptor();
  }
  static inline const ::std::string& Algo_Name(Algo value) {
    return Config_Algo_Name(value);
  }
  static inline bool Algo_Parse(const ::std::string& name,
      Algo* value) {
    return Config_Algo_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string train_data = 1;
  inline bool has_train_data() const;
  inline void clear_train_data();
  static const int kTrainDataFieldNumber = 1;
  inline const ::std::string& train_data() const;
  inline void set_train_data(const ::std::string& value);
  inline void set_train_data(const char* value);
  inline void set_train_data(const char* value, size_t size);
  inline ::std::string* mutable_train_data();
  inline ::std::string* release_train_data();
  inline void set_allocated_train_data(::std::string* train_data);

  // optional string val_data = 2;
  inline bool has_val_data() const;
  inline void clear_val_data();
  static const int kValDataFieldNumber = 2;
  inline const ::std::string& val_data() const;
  inline void set_val_data(const ::std::string& value);
  inline void set_val_data(const char* value);
  inline void set_val_data(const char* value, size_t size);
  inline ::std::string* mutable_val_data();
  inline ::std::string* release_val_data();
  inline void set_allocated_val_data(::std::string* val_data);

  // optional string data_format = 4 [default = "libsvm"];
  inline bool has_data_format() const;
  inline void clear_data_format();
  static const int kDataFormatFieldNumber = 4;
  inline const ::std::string& data_format() const;
  inline void set_data_format(const ::std::string& value);
  inline void set_data_format(const char* value);
  inline void set_data_format(const char* value, size_t size);
  inline ::std::string* mutable_data_format();
  inline ::std::string* release_data_format();
  inline void set_allocated_data_format(::std::string* data_format);

  // optional string model_out = 5;
  inline bool has_model_out() const;
  inline void clear_model_out();
  static const int kModelOutFieldNumber = 5;
  inline const ::std::string& model_out() const;
  inline void set_model_out(const ::std::string& value);
  inline void set_model_out(const char* value);
  inline void set_model_out(const char* value, size_t size);
  inline ::std::string* mutable_model_out();
  inline ::std::string* release_model_out();
  inline void set_allocated_model_out(::std::string* model_out);

  // optional string model_in = 7;
  inline bool has_model_in() const;
  inline void clear_model_in();
  static const int kModelInFieldNumber = 7;
  inline const ::std::string& model_in() const;
  inline void set_model_in(const ::std::string& value);
  inline void set_model_in(const char* value);
  inline void set_model_in(const char* value, size_t size);
  inline ::std::string* mutable_model_in();
  inline ::std::string* release_model_in();
  inline void set_allocated_model_in(::std::string* model_in);

  // optional string predict_out = 9;
  inline bool has_predict_out() const;
  inline void clear_predict_out();
  static const int kPredictOutFieldNumber = 9;
  inline const ::std::string& predict_out() const;
  inline void set_predict_out(const ::std::string& value);
  inline void set_predict_out(const char* value);
  inline void set_predict_out(const char* value, size_t size);
  inline ::std::string* mutable_predict_out();
  inline ::std::string* release_predict_out();
  inline void set_allocated_predict_out(::std::string* predict_out);

  // optional .dmlc.linear.Config.Loss loss = 11 [default = LOGIT];
  inline bool has_loss() const;
  inline void clear_loss();
  static const int kLossFieldNumber = 11;
  inline ::dmlc::linear::Config_Loss loss() const;
  inline void set_loss(::dmlc::linear::Config_Loss value);

  // optional float lambda_l1 = 12 [default = 1];
  inline bool has_lambda_l1() const;
  inline void clear_lambda_l1();
  static const int kLambdaL1FieldNumber = 12;
  inline float lambda_l1() const;
  inline void set_lambda_l1(float value);

  // optional float lambda_l2 = 13 [default = 0];
  inline bool has_lambda_l2() const;
  inline void clear_lambda_l2();
  static const int kLambdaL2FieldNumber = 13;
  inline float lambda_l2() const;
  inline void set_lambda_l2(float value);

  // optional .dmlc.linear.Config.Algo algo = 21 [default = FTRL];
  inline bool has_algo() const;
  inline void clear_algo();
  static const int kAlgoFieldNumber = 21;
  inline ::dmlc::linear::Config_Algo algo() const;
  inline void set_algo(::dmlc::linear::Config_Algo value);

  // optional int32 minibatch = 22 [default = 1000];
  inline bool has_minibatch() const;
  inline void clear_minibatch();
  static const int kMinibatchFieldNumber = 22;
  inline ::google::protobuf::int32 minibatch() const;
  inline void set_minibatch(::google::protobuf::int32 value);

  // optional int32 max_data_pass = 23 [default = 10];
  inline bool has_max_data_pass() const;
  inline void clear_max_data_pass();
  static const int kMaxDataPassFieldNumber = 23;
  inline ::google::protobuf::int32 max_data_pass() const;
  inline void set_max_data_pass(::google::protobuf::int32 value);

  // optional float lr_eta = 24 [default = 0.01];
  inline bool has_lr_eta() const;
  inline void clear_lr_eta();
  static const int kLrEtaFieldNumber = 24;
  inline float lr_eta() const;
  inline void set_lr_eta(float value);

  // optional int32 save_iter = 6 [default = -1];
  inline bool has_save_iter() const;
  inline void clear_save_iter();
  static const int kSaveIterFieldNumber = 6;
  inline ::google::protobuf::int32 save_iter() const;
  inline void set_save_iter(::google::protobuf::int32 value);

  // optional int32 load_iter = 8 [default = -1];
  inline bool has_load_iter() const;
  inline void clear_load_iter();
  static const int kLoadIterFieldNumber = 8;
  inline ::google::protobuf::int32 load_iter() const;
  inline void set_load_iter(::google::protobuf::int32 value);

  // optional bool local_data = 101 [default = false];
  inline bool has_local_data() const;
  inline void clear_local_data();
  static const int kLocalDataFieldNumber = 101;
  inline bool local_data() const;
  inline void set_local_data(bool value);

  // optional int32 num_parts_per_file = 102 [default = 10];
  inline bool has_num_parts_per_file() const;
  inline void clear_num_parts_per_file();
  static const int kNumPartsPerFileFieldNumber = 102;
  inline ::google::protobuf::int32 num_parts_per_file() const;
  inline void set_num_parts_per_file(::google::protobuf::int32 value);

  // optional int32 rand_shuffle = 103 [default = 10];
  inline bool has_rand_shuffle() const;
  inline void clear_rand_shuffle();
  static const int kRandShuffleFieldNumber = 103;
  inline ::google::protobuf::int32 rand_shuffle() const;
  inline void set_rand_shuffle(::google::protobuf::int32 value);

  // optional float neg_sampling = 104 [default = 1];
  inline bool has_neg_sampling() const;
  inline void clear_neg_sampling();
  static const int kNegSamplingFieldNumber = 104;
  inline float neg_sampling() const;
  inline void set_neg_sampling(float value);

  // optional bool prob_predict = 105 [default = true];
  inline bool has_prob_predict() const;
  inline void clear_prob_predict();
  static const int kProbPredictFieldNumber = 105;
  inline bool prob_predict() const;
  inline void set_prob_predict(bool value);

  // optional float dropout = 110 [default = 0];
  inline bool has_dropout() const;
  inline void clear_dropout();
  static const int kDropoutFieldNumber = 110;
  inline float dropout() const;
  inline void set_dropout(float value);

  // optional float print_sec = 111 [default = 1];
  inline bool has_print_sec() const;
  inline void clear_print_sec();
  static const int kPrintSecFieldNumber = 111;
  inline float print_sec() const;
  inline void set_print_sec(float value);

  // optional float lr_beta = 112 [default = 1];
  inline bool has_lr_beta() const;
  inline void clear_lr_beta();
  static const int kLrBetaFieldNumber = 112;
  inline float lr_beta() const;
  inline void set_lr_beta(float value);

  // optional int32 num_threads = 121 [default = 2];
  inline bool has_num_threads() const;
  inline void clear_num_threads();
  static const int kNumThreadsFieldNumber = 121;
  inline ::google::protobuf::int32 num_threads() const;
  inline void set_num_threads(::google::protobuf::int32 value);

  // optional int32 max_concurrency = 122 [default = 2];
  inline bool has_max_concurrency() const;
  inline void clear_max_concurrency();
  static const int kMaxConcurrencyFieldNumber = 122;
  inline ::google::protobuf::int32 max_concurrency() const;
  inline void set_max_concurrency(::google::protobuf::int32 value);

  // optional bool key_cache = 123 [default = true];
  inline bool has_key_cache() const;
  inline void clear_key_cache();
  static const int kKeyCacheFieldNumber = 123;
  inline bool key_cache() const;
  inline void set_key_cache(bool value);

  // optional bool msg_compression = 124 [default = true];
  inline bool has_msg_compression() const;
  inline void clear_msg_compression();
  static const int kMsgCompressionFieldNumber = 124;
  inline bool msg_compression() const;
  inline void set_msg_compression(bool value);

  // optional int32 fixed_bytes = 125 [default = 0];
  inline bool has_fixed_bytes() const;
  inline void clear_fixed_bytes();
  static const int kFixedBytesFieldNumber = 125;
  inline ::google::protobuf::int32 fixed_bytes() const;
  inline void set_fixed_bytes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dmlc.linear.Config)
 private:
  inline void set_has_train_data();
  inline void clear_has_train_data();
  inline void set_has_val_data();
  inline void clear_has_val_data();
  inline void set_has_data_format();
  inline void clear_has_data_format();
  inline void set_has_model_out();
  inline void clear_has_model_out();
  inline void set_has_model_in();
  inline void clear_has_model_in();
  inline void set_has_predict_out();
  inline void clear_has_predict_out();
  inline void set_has_loss();
  inline void clear_has_loss();
  inline void set_has_lambda_l1();
  inline void clear_has_lambda_l1();
  inline void set_has_lambda_l2();
  inline void clear_has_lambda_l2();
  inline void set_has_algo();
  inline void clear_has_algo();
  inline void set_has_minibatch();
  inline void clear_has_minibatch();
  inline void set_has_max_data_pass();
  inline void clear_has_max_data_pass();
  inline void set_has_lr_eta();
  inline void clear_has_lr_eta();
  inline void set_has_save_iter();
  inline void clear_has_save_iter();
  inline void set_has_load_iter();
  inline void clear_has_load_iter();
  inline void set_has_local_data();
  inline void clear_has_local_data();
  inline void set_has_num_parts_per_file();
  inline void clear_has_num_parts_per_file();
  inline void set_has_rand_shuffle();
  inline void clear_has_rand_shuffle();
  inline void set_has_neg_sampling();
  inline void clear_has_neg_sampling();
  inline void set_has_prob_predict();
  inline void clear_has_prob_predict();
  inline void set_has_dropout();
  inline void clear_has_dropout();
  inline void set_has_print_sec();
  inline void clear_has_print_sec();
  inline void set_has_lr_beta();
  inline void clear_has_lr_beta();
  inline void set_has_num_threads();
  inline void clear_has_num_threads();
  inline void set_has_max_concurrency();
  inline void clear_has_max_concurrency();
  inline void set_has_key_cache();
  inline void clear_has_key_cache();
  inline void set_has_msg_compression();
  inline void clear_has_msg_compression();
  inline void set_has_fixed_bytes();
  inline void clear_has_fixed_bytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* train_data_;
  ::std::string* val_data_;
  ::std::string* data_format_;
  static ::std::string* _default_data_format_;
  ::std::string* model_out_;
  ::std::string* model_in_;
  ::std::string* predict_out_;
  int loss_;
  float lambda_l1_;
  float lambda_l2_;
  int algo_;
  ::google::protobuf::int32 minibatch_;
  ::google::protobuf::int32 max_data_pass_;
  float lr_eta_;
  ::google::protobuf::int32 save_iter_;
  ::google::protobuf::int32 load_iter_;
  ::google::protobuf::int32 num_parts_per_file_;
  ::google::protobuf::int32 rand_shuffle_;
  float neg_sampling_;
  float dropout_;
  float print_sec_;
  bool local_data_;
  bool prob_predict_;
  bool key_cache_;
  bool msg_compression_;
  float lr_beta_;
  ::google::protobuf::int32 num_threads_;
  ::google::protobuf::int32 max_concurrency_;
  ::google::protobuf::int32 fixed_bytes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];

  friend void  protobuf_AddDesc_config_2eproto();
  friend void protobuf_AssignDesc_config_2eproto();
  friend void protobuf_ShutdownFile_config_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional string train_data = 1;
inline bool Config::has_train_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_train_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_train_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_train_data() {
  if (train_data_ != &::google::protobuf::internal::kEmptyString) {
    train_data_->clear();
  }
  clear_has_train_data();
}
inline const ::std::string& Config::train_data() const {
  return *train_data_;
}
inline void Config::set_train_data(const ::std::string& value) {
  set_has_train_data();
  if (train_data_ == &::google::protobuf::internal::kEmptyString) {
    train_data_ = new ::std::string;
  }
  train_data_->assign(value);
}
inline void Config::set_train_data(const char* value) {
  set_has_train_data();
  if (train_data_ == &::google::protobuf::internal::kEmptyString) {
    train_data_ = new ::std::string;
  }
  train_data_->assign(value);
}
inline void Config::set_train_data(const char* value, size_t size) {
  set_has_train_data();
  if (train_data_ == &::google::protobuf::internal::kEmptyString) {
    train_data_ = new ::std::string;
  }
  train_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_train_data() {
  set_has_train_data();
  if (train_data_ == &::google::protobuf::internal::kEmptyString) {
    train_data_ = new ::std::string;
  }
  return train_data_;
}
inline ::std::string* Config::release_train_data() {
  clear_has_train_data();
  if (train_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = train_data_;
    train_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_train_data(::std::string* train_data) {
  if (train_data_ != &::google::protobuf::internal::kEmptyString) {
    delete train_data_;
  }
  if (train_data) {
    set_has_train_data();
    train_data_ = train_data;
  } else {
    clear_has_train_data();
    train_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string val_data = 2;
inline bool Config::has_val_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_val_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_val_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_val_data() {
  if (val_data_ != &::google::protobuf::internal::kEmptyString) {
    val_data_->clear();
  }
  clear_has_val_data();
}
inline const ::std::string& Config::val_data() const {
  return *val_data_;
}
inline void Config::set_val_data(const ::std::string& value) {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  val_data_->assign(value);
}
inline void Config::set_val_data(const char* value) {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  val_data_->assign(value);
}
inline void Config::set_val_data(const char* value, size_t size) {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  val_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_val_data() {
  set_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    val_data_ = new ::std::string;
  }
  return val_data_;
}
inline ::std::string* Config::release_val_data() {
  clear_has_val_data();
  if (val_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_data_;
    val_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_val_data(::std::string* val_data) {
  if (val_data_ != &::google::protobuf::internal::kEmptyString) {
    delete val_data_;
  }
  if (val_data) {
    set_has_val_data();
    val_data_ = val_data;
  } else {
    clear_has_val_data();
    val_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string data_format = 4 [default = "libsvm"];
inline bool Config::has_data_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_data_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_data_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_data_format() {
  if (data_format_ != _default_data_format_) {
    data_format_->assign(*_default_data_format_);
  }
  clear_has_data_format();
}
inline const ::std::string& Config::data_format() const {
  return *data_format_;
}
inline void Config::set_data_format(const ::std::string& value) {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string;
  }
  data_format_->assign(value);
}
inline void Config::set_data_format(const char* value) {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string;
  }
  data_format_->assign(value);
}
inline void Config::set_data_format(const char* value, size_t size) {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string;
  }
  data_format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_data_format() {
  set_has_data_format();
  if (data_format_ == _default_data_format_) {
    data_format_ = new ::std::string(*_default_data_format_);
  }
  return data_format_;
}
inline ::std::string* Config::release_data_format() {
  clear_has_data_format();
  if (data_format_ == _default_data_format_) {
    return NULL;
  } else {
    ::std::string* temp = data_format_;
    data_format_ = const_cast< ::std::string*>(_default_data_format_);
    return temp;
  }
}
inline void Config::set_allocated_data_format(::std::string* data_format) {
  if (data_format_ != _default_data_format_) {
    delete data_format_;
  }
  if (data_format) {
    set_has_data_format();
    data_format_ = data_format;
  } else {
    clear_has_data_format();
    data_format_ = const_cast< ::std::string*>(_default_data_format_);
  }
}

// optional string model_out = 5;
inline bool Config::has_model_out() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_model_out() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_model_out() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_model_out() {
  if (model_out_ != &::google::protobuf::internal::kEmptyString) {
    model_out_->clear();
  }
  clear_has_model_out();
}
inline const ::std::string& Config::model_out() const {
  return *model_out_;
}
inline void Config::set_model_out(const ::std::string& value) {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  model_out_->assign(value);
}
inline void Config::set_model_out(const char* value) {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  model_out_->assign(value);
}
inline void Config::set_model_out(const char* value, size_t size) {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  model_out_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_model_out() {
  set_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    model_out_ = new ::std::string;
  }
  return model_out_;
}
inline ::std::string* Config::release_model_out() {
  clear_has_model_out();
  if (model_out_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_out_;
    model_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_model_out(::std::string* model_out) {
  if (model_out_ != &::google::protobuf::internal::kEmptyString) {
    delete model_out_;
  }
  if (model_out) {
    set_has_model_out();
    model_out_ = model_out;
  } else {
    clear_has_model_out();
    model_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string model_in = 7;
inline bool Config::has_model_in() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_model_in() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_model_in() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_model_in() {
  if (model_in_ != &::google::protobuf::internal::kEmptyString) {
    model_in_->clear();
  }
  clear_has_model_in();
}
inline const ::std::string& Config::model_in() const {
  return *model_in_;
}
inline void Config::set_model_in(const ::std::string& value) {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  model_in_->assign(value);
}
inline void Config::set_model_in(const char* value) {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  model_in_->assign(value);
}
inline void Config::set_model_in(const char* value, size_t size) {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  model_in_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_model_in() {
  set_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    model_in_ = new ::std::string;
  }
  return model_in_;
}
inline ::std::string* Config::release_model_in() {
  clear_has_model_in();
  if (model_in_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_in_;
    model_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_model_in(::std::string* model_in) {
  if (model_in_ != &::google::protobuf::internal::kEmptyString) {
    delete model_in_;
  }
  if (model_in) {
    set_has_model_in();
    model_in_ = model_in;
  } else {
    clear_has_model_in();
    model_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string predict_out = 9;
inline bool Config::has_predict_out() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_predict_out() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_predict_out() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_predict_out() {
  if (predict_out_ != &::google::protobuf::internal::kEmptyString) {
    predict_out_->clear();
  }
  clear_has_predict_out();
}
inline const ::std::string& Config::predict_out() const {
  return *predict_out_;
}
inline void Config::set_predict_out(const ::std::string& value) {
  set_has_predict_out();
  if (predict_out_ == &::google::protobuf::internal::kEmptyString) {
    predict_out_ = new ::std::string;
  }
  predict_out_->assign(value);
}
inline void Config::set_predict_out(const char* value) {
  set_has_predict_out();
  if (predict_out_ == &::google::protobuf::internal::kEmptyString) {
    predict_out_ = new ::std::string;
  }
  predict_out_->assign(value);
}
inline void Config::set_predict_out(const char* value, size_t size) {
  set_has_predict_out();
  if (predict_out_ == &::google::protobuf::internal::kEmptyString) {
    predict_out_ = new ::std::string;
  }
  predict_out_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_predict_out() {
  set_has_predict_out();
  if (predict_out_ == &::google::protobuf::internal::kEmptyString) {
    predict_out_ = new ::std::string;
  }
  return predict_out_;
}
inline ::std::string* Config::release_predict_out() {
  clear_has_predict_out();
  if (predict_out_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = predict_out_;
    predict_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_predict_out(::std::string* predict_out) {
  if (predict_out_ != &::google::protobuf::internal::kEmptyString) {
    delete predict_out_;
  }
  if (predict_out) {
    set_has_predict_out();
    predict_out_ = predict_out;
  } else {
    clear_has_predict_out();
    predict_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .dmlc.linear.Config.Loss loss = 11 [default = LOGIT];
inline bool Config::has_loss() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_loss() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_loss() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_loss() {
  loss_ = 2;
  clear_has_loss();
}
inline ::dmlc::linear::Config_Loss Config::loss() const {
  return static_cast< ::dmlc::linear::Config_Loss >(loss_);
}
inline void Config::set_loss(::dmlc::linear::Config_Loss value) {
  assert(::dmlc::linear::Config_Loss_IsValid(value));
  set_has_loss();
  loss_ = value;
}

// optional float lambda_l1 = 12 [default = 1];
inline bool Config::has_lambda_l1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Config::set_has_lambda_l1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Config::clear_has_lambda_l1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Config::clear_lambda_l1() {
  lambda_l1_ = 1;
  clear_has_lambda_l1();
}
inline float Config::lambda_l1() const {
  return lambda_l1_;
}
inline void Config::set_lambda_l1(float value) {
  set_has_lambda_l1();
  lambda_l1_ = value;
}

// optional float lambda_l2 = 13 [default = 0];
inline bool Config::has_lambda_l2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Config::set_has_lambda_l2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Config::clear_has_lambda_l2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Config::clear_lambda_l2() {
  lambda_l2_ = 0;
  clear_has_lambda_l2();
}
inline float Config::lambda_l2() const {
  return lambda_l2_;
}
inline void Config::set_lambda_l2(float value) {
  set_has_lambda_l2();
  lambda_l2_ = value;
}

// optional .dmlc.linear.Config.Algo algo = 21 [default = FTRL];
inline bool Config::has_algo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Config::set_has_algo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Config::clear_has_algo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Config::clear_algo() {
  algo_ = 3;
  clear_has_algo();
}
inline ::dmlc::linear::Config_Algo Config::algo() const {
  return static_cast< ::dmlc::linear::Config_Algo >(algo_);
}
inline void Config::set_algo(::dmlc::linear::Config_Algo value) {
  assert(::dmlc::linear::Config_Algo_IsValid(value));
  set_has_algo();
  algo_ = value;
}

// optional int32 minibatch = 22 [default = 1000];
inline bool Config::has_minibatch() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Config::set_has_minibatch() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Config::clear_has_minibatch() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Config::clear_minibatch() {
  minibatch_ = 1000;
  clear_has_minibatch();
}
inline ::google::protobuf::int32 Config::minibatch() const {
  return minibatch_;
}
inline void Config::set_minibatch(::google::protobuf::int32 value) {
  set_has_minibatch();
  minibatch_ = value;
}

// optional int32 max_data_pass = 23 [default = 10];
inline bool Config::has_max_data_pass() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Config::set_has_max_data_pass() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Config::clear_has_max_data_pass() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Config::clear_max_data_pass() {
  max_data_pass_ = 10;
  clear_has_max_data_pass();
}
inline ::google::protobuf::int32 Config::max_data_pass() const {
  return max_data_pass_;
}
inline void Config::set_max_data_pass(::google::protobuf::int32 value) {
  set_has_max_data_pass();
  max_data_pass_ = value;
}

// optional float lr_eta = 24 [default = 0.01];
inline bool Config::has_lr_eta() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Config::set_has_lr_eta() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Config::clear_has_lr_eta() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Config::clear_lr_eta() {
  lr_eta_ = 0.01f;
  clear_has_lr_eta();
}
inline float Config::lr_eta() const {
  return lr_eta_;
}
inline void Config::set_lr_eta(float value) {
  set_has_lr_eta();
  lr_eta_ = value;
}

// optional int32 save_iter = 6 [default = -1];
inline bool Config::has_save_iter() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Config::set_has_save_iter() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Config::clear_has_save_iter() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Config::clear_save_iter() {
  save_iter_ = -1;
  clear_has_save_iter();
}
inline ::google::protobuf::int32 Config::save_iter() const {
  return save_iter_;
}
inline void Config::set_save_iter(::google::protobuf::int32 value) {
  set_has_save_iter();
  save_iter_ = value;
}

// optional int32 load_iter = 8 [default = -1];
inline bool Config::has_load_iter() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Config::set_has_load_iter() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Config::clear_has_load_iter() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Config::clear_load_iter() {
  load_iter_ = -1;
  clear_has_load_iter();
}
inline ::google::protobuf::int32 Config::load_iter() const {
  return load_iter_;
}
inline void Config::set_load_iter(::google::protobuf::int32 value) {
  set_has_load_iter();
  load_iter_ = value;
}

// optional bool local_data = 101 [default = false];
inline bool Config::has_local_data() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Config::set_has_local_data() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Config::clear_has_local_data() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Config::clear_local_data() {
  local_data_ = false;
  clear_has_local_data();
}
inline bool Config::local_data() const {
  return local_data_;
}
inline void Config::set_local_data(bool value) {
  set_has_local_data();
  local_data_ = value;
}

// optional int32 num_parts_per_file = 102 [default = 10];
inline bool Config::has_num_parts_per_file() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Config::set_has_num_parts_per_file() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Config::clear_has_num_parts_per_file() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Config::clear_num_parts_per_file() {
  num_parts_per_file_ = 10;
  clear_has_num_parts_per_file();
}
inline ::google::protobuf::int32 Config::num_parts_per_file() const {
  return num_parts_per_file_;
}
inline void Config::set_num_parts_per_file(::google::protobuf::int32 value) {
  set_has_num_parts_per_file();
  num_parts_per_file_ = value;
}

// optional int32 rand_shuffle = 103 [default = 10];
inline bool Config::has_rand_shuffle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Config::set_has_rand_shuffle() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Config::clear_has_rand_shuffle() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Config::clear_rand_shuffle() {
  rand_shuffle_ = 10;
  clear_has_rand_shuffle();
}
inline ::google::protobuf::int32 Config::rand_shuffle() const {
  return rand_shuffle_;
}
inline void Config::set_rand_shuffle(::google::protobuf::int32 value) {
  set_has_rand_shuffle();
  rand_shuffle_ = value;
}

// optional float neg_sampling = 104 [default = 1];
inline bool Config::has_neg_sampling() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Config::set_has_neg_sampling() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Config::clear_has_neg_sampling() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Config::clear_neg_sampling() {
  neg_sampling_ = 1;
  clear_has_neg_sampling();
}
inline float Config::neg_sampling() const {
  return neg_sampling_;
}
inline void Config::set_neg_sampling(float value) {
  set_has_neg_sampling();
  neg_sampling_ = value;
}

// optional bool prob_predict = 105 [default = true];
inline bool Config::has_prob_predict() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Config::set_has_prob_predict() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Config::clear_has_prob_predict() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Config::clear_prob_predict() {
  prob_predict_ = true;
  clear_has_prob_predict();
}
inline bool Config::prob_predict() const {
  return prob_predict_;
}
inline void Config::set_prob_predict(bool value) {
  set_has_prob_predict();
  prob_predict_ = value;
}

// optional float dropout = 110 [default = 0];
inline bool Config::has_dropout() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Config::set_has_dropout() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Config::clear_has_dropout() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Config::clear_dropout() {
  dropout_ = 0;
  clear_has_dropout();
}
inline float Config::dropout() const {
  return dropout_;
}
inline void Config::set_dropout(float value) {
  set_has_dropout();
  dropout_ = value;
}

// optional float print_sec = 111 [default = 1];
inline bool Config::has_print_sec() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Config::set_has_print_sec() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Config::clear_has_print_sec() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Config::clear_print_sec() {
  print_sec_ = 1;
  clear_has_print_sec();
}
inline float Config::print_sec() const {
  return print_sec_;
}
inline void Config::set_print_sec(float value) {
  set_has_print_sec();
  print_sec_ = value;
}

// optional float lr_beta = 112 [default = 1];
inline bool Config::has_lr_beta() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Config::set_has_lr_beta() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Config::clear_has_lr_beta() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Config::clear_lr_beta() {
  lr_beta_ = 1;
  clear_has_lr_beta();
}
inline float Config::lr_beta() const {
  return lr_beta_;
}
inline void Config::set_lr_beta(float value) {
  set_has_lr_beta();
  lr_beta_ = value;
}

// optional int32 num_threads = 121 [default = 2];
inline bool Config::has_num_threads() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Config::set_has_num_threads() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Config::clear_has_num_threads() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Config::clear_num_threads() {
  num_threads_ = 2;
  clear_has_num_threads();
}
inline ::google::protobuf::int32 Config::num_threads() const {
  return num_threads_;
}
inline void Config::set_num_threads(::google::protobuf::int32 value) {
  set_has_num_threads();
  num_threads_ = value;
}

// optional int32 max_concurrency = 122 [default = 2];
inline bool Config::has_max_concurrency() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Config::set_has_max_concurrency() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Config::clear_has_max_concurrency() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Config::clear_max_concurrency() {
  max_concurrency_ = 2;
  clear_has_max_concurrency();
}
inline ::google::protobuf::int32 Config::max_concurrency() const {
  return max_concurrency_;
}
inline void Config::set_max_concurrency(::google::protobuf::int32 value) {
  set_has_max_concurrency();
  max_concurrency_ = value;
}

// optional bool key_cache = 123 [default = true];
inline bool Config::has_key_cache() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Config::set_has_key_cache() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Config::clear_has_key_cache() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Config::clear_key_cache() {
  key_cache_ = true;
  clear_has_key_cache();
}
inline bool Config::key_cache() const {
  return key_cache_;
}
inline void Config::set_key_cache(bool value) {
  set_has_key_cache();
  key_cache_ = value;
}

// optional bool msg_compression = 124 [default = true];
inline bool Config::has_msg_compression() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Config::set_has_msg_compression() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Config::clear_has_msg_compression() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Config::clear_msg_compression() {
  msg_compression_ = true;
  clear_has_msg_compression();
}
inline bool Config::msg_compression() const {
  return msg_compression_;
}
inline void Config::set_msg_compression(bool value) {
  set_has_msg_compression();
  msg_compression_ = value;
}

// optional int32 fixed_bytes = 125 [default = 0];
inline bool Config::has_fixed_bytes() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Config::set_has_fixed_bytes() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Config::clear_has_fixed_bytes() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Config::clear_fixed_bytes() {
  fixed_bytes_ = 0;
  clear_has_fixed_bytes();
}
inline ::google::protobuf::int32 Config::fixed_bytes() const {
  return fixed_bytes_;
}
inline void Config::set_fixed_bytes(::google::protobuf::int32 value) {
  set_has_fixed_bytes();
  fixed_bytes_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace linear
}  // namespace dmlc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dmlc::linear::Config_Loss>() {
  return ::dmlc::linear::Config_Loss_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dmlc::linear::Config_Algo>() {
  return ::dmlc::linear::Config_Algo_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_2eproto__INCLUDED
