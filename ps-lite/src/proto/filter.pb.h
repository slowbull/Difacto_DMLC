// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/filter.proto

#ifndef PROTOBUF_proto_2ffilter_2eproto__INCLUDED
#define PROTOBUF_proto_2ffilter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ps {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2ffilter_2eproto();
void protobuf_AssignDesc_proto_2ffilter_2eproto();
void protobuf_ShutdownFile_proto_2ffilter_2eproto();

class Filter;
class Filter_FixedFloatConfig;

enum Filter_Type {
  Filter_Type_KEY_CACHING = 1,
  Filter_Type_COMPRESSING = 2,
  Filter_Type_FIXING_FLOAT = 3,
  Filter_Type_NOISE = 4,
  Filter_Type_DELTA_KEY = 5,
  Filter_Type_TRUNCATE_FLOAT = 6
};
bool Filter_Type_IsValid(int value);
const Filter_Type Filter_Type_Type_MIN = Filter_Type_KEY_CACHING;
const Filter_Type Filter_Type_Type_MAX = Filter_Type_TRUNCATE_FLOAT;
const int Filter_Type_Type_ARRAYSIZE = Filter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Filter_Type_descriptor();
inline const ::std::string& Filter_Type_Name(Filter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Filter_Type_descriptor(), value);
}
inline bool Filter_Type_Parse(
    const ::std::string& name, Filter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Filter_Type>(
    Filter_Type_descriptor(), name, value);
}
// ===================================================================

class Filter_FixedFloatConfig : public ::google::protobuf::Message {
 public:
  Filter_FixedFloatConfig();
  virtual ~Filter_FixedFloatConfig();

  Filter_FixedFloatConfig(const Filter_FixedFloatConfig& from);

  inline Filter_FixedFloatConfig& operator=(const Filter_FixedFloatConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Filter_FixedFloatConfig& default_instance();

  void Swap(Filter_FixedFloatConfig* other);

  // implements Message ----------------------------------------------

  Filter_FixedFloatConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Filter_FixedFloatConfig& from);
  void MergeFrom(const Filter_FixedFloatConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_value = 1 [default = -1];
  inline bool has_min_value() const;
  inline void clear_min_value();
  static const int kMinValueFieldNumber = 1;
  inline float min_value() const;
  inline void set_min_value(float value);

  // optional float max_value = 2 [default = 1];
  inline bool has_max_value() const;
  inline void clear_max_value();
  static const int kMaxValueFieldNumber = 2;
  inline float max_value() const;
  inline void set_max_value(float value);

  // @@protoc_insertion_point(class_scope:ps.Filter.FixedFloatConfig)
 private:
  inline void set_has_min_value();
  inline void clear_has_min_value();
  inline void set_has_max_value();
  inline void clear_has_max_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float min_value_;
  float max_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2ffilter_2eproto();
  friend void protobuf_AssignDesc_proto_2ffilter_2eproto();
  friend void protobuf_ShutdownFile_proto_2ffilter_2eproto();

  void InitAsDefaultInstance();
  static Filter_FixedFloatConfig* default_instance_;
};
// -------------------------------------------------------------------

class Filter : public ::google::protobuf::Message {
 public:
  Filter();
  virtual ~Filter();

  Filter(const Filter& from);

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Filter& default_instance();

  void Swap(Filter* other);

  // implements Message ----------------------------------------------

  Filter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Filter_FixedFloatConfig FixedFloatConfig;

  typedef Filter_Type Type;
  static const Type KEY_CACHING = Filter_Type_KEY_CACHING;
  static const Type COMPRESSING = Filter_Type_COMPRESSING;
  static const Type FIXING_FLOAT = Filter_Type_FIXING_FLOAT;
  static const Type NOISE = Filter_Type_NOISE;
  static const Type DELTA_KEY = Filter_Type_DELTA_KEY;
  static const Type TRUNCATE_FLOAT = Filter_Type_TRUNCATE_FLOAT;
  static inline bool Type_IsValid(int value) {
    return Filter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Filter_Type_Type_MIN;
  static const Type Type_MAX =
    Filter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Filter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Filter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Filter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Filter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ps.Filter.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ps::Filter_Type type() const;
  inline void set_type(::ps::Filter_Type value);

  // optional bool clear_cache = 20 [default = false];
  inline bool has_clear_cache() const;
  inline void clear_clear_cache();
  static const int kClearCacheFieldNumber = 20;
  inline bool clear_cache() const;
  inline void set_clear_cache(bool value);

  // optional int32 num_bytes = 5 [default = 3];
  inline bool has_num_bytes() const;
  inline void clear_num_bytes();
  static const int kNumBytesFieldNumber = 5;
  inline ::google::protobuf::int32 num_bytes() const;
  inline void set_num_bytes(::google::protobuf::int32 value);

  // optional float mean = 6;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 6;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 7;
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 7;
  inline float std() const;
  inline void set_std(float value);

  // repeated .ps.Filter.FixedFloatConfig fixed_point = 4;
  inline int fixed_point_size() const;
  inline void clear_fixed_point();
  static const int kFixedPointFieldNumber = 4;
  inline const ::ps::Filter_FixedFloatConfig& fixed_point(int index) const;
  inline ::ps::Filter_FixedFloatConfig* mutable_fixed_point(int index);
  inline ::ps::Filter_FixedFloatConfig* add_fixed_point();
  inline const ::google::protobuf::RepeatedPtrField< ::ps::Filter_FixedFloatConfig >&
      fixed_point() const;
  inline ::google::protobuf::RepeatedPtrField< ::ps::Filter_FixedFloatConfig >*
      mutable_fixed_point();

  // optional uint64 signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline ::google::protobuf::uint64 signature() const;
  inline void set_signature(::google::protobuf::uint64 value);

  // repeated uint64 uncompressed_size = 3;
  inline int uncompressed_size_size() const;
  inline void clear_uncompressed_size();
  static const int kUncompressedSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 uncompressed_size(int index) const;
  inline void set_uncompressed_size(int index, ::google::protobuf::uint64 value);
  inline void add_uncompressed_size(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uncompressed_size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uncompressed_size();

  // @@protoc_insertion_point(class_scope:ps.Filter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_clear_cache();
  inline void clear_has_clear_cache();
  inline void set_has_num_bytes();
  inline void clear_has_num_bytes();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool clear_cache_;
  ::google::protobuf::int32 num_bytes_;
  float mean_;
  ::google::protobuf::RepeatedPtrField< ::ps::Filter_FixedFloatConfig > fixed_point_;
  ::google::protobuf::uint64 signature_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uncompressed_size_;
  float std_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2ffilter_2eproto();
  friend void protobuf_AssignDesc_proto_2ffilter_2eproto();
  friend void protobuf_ShutdownFile_proto_2ffilter_2eproto();

  void InitAsDefaultInstance();
  static Filter* default_instance_;
};
// ===================================================================


// ===================================================================

// Filter_FixedFloatConfig

// optional float min_value = 1 [default = -1];
inline bool Filter_FixedFloatConfig::has_min_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Filter_FixedFloatConfig::set_has_min_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Filter_FixedFloatConfig::clear_has_min_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Filter_FixedFloatConfig::clear_min_value() {
  min_value_ = -1;
  clear_has_min_value();
}
inline float Filter_FixedFloatConfig::min_value() const {
  return min_value_;
}
inline void Filter_FixedFloatConfig::set_min_value(float value) {
  set_has_min_value();
  min_value_ = value;
}

// optional float max_value = 2 [default = 1];
inline bool Filter_FixedFloatConfig::has_max_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Filter_FixedFloatConfig::set_has_max_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Filter_FixedFloatConfig::clear_has_max_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Filter_FixedFloatConfig::clear_max_value() {
  max_value_ = 1;
  clear_has_max_value();
}
inline float Filter_FixedFloatConfig::max_value() const {
  return max_value_;
}
inline void Filter_FixedFloatConfig::set_max_value(float value) {
  set_has_max_value();
  max_value_ = value;
}

// -------------------------------------------------------------------

// Filter

// required .ps.Filter.Type type = 1;
inline bool Filter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Filter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Filter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Filter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ps::Filter_Type Filter::type() const {
  return static_cast< ::ps::Filter_Type >(type_);
}
inline void Filter::set_type(::ps::Filter_Type value) {
  assert(::ps::Filter_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool clear_cache = 20 [default = false];
inline bool Filter::has_clear_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Filter::set_has_clear_cache() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Filter::clear_has_clear_cache() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Filter::clear_clear_cache() {
  clear_cache_ = false;
  clear_has_clear_cache();
}
inline bool Filter::clear_cache() const {
  return clear_cache_;
}
inline void Filter::set_clear_cache(bool value) {
  set_has_clear_cache();
  clear_cache_ = value;
}

// optional int32 num_bytes = 5 [default = 3];
inline bool Filter::has_num_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Filter::set_has_num_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Filter::clear_has_num_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Filter::clear_num_bytes() {
  num_bytes_ = 3;
  clear_has_num_bytes();
}
inline ::google::protobuf::int32 Filter::num_bytes() const {
  return num_bytes_;
}
inline void Filter::set_num_bytes(::google::protobuf::int32 value) {
  set_has_num_bytes();
  num_bytes_ = value;
}

// optional float mean = 6;
inline bool Filter::has_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Filter::set_has_mean() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Filter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Filter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float Filter::mean() const {
  return mean_;
}
inline void Filter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
}

// optional float std = 7;
inline bool Filter::has_std() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Filter::set_has_std() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Filter::clear_has_std() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Filter::clear_std() {
  std_ = 0;
  clear_has_std();
}
inline float Filter::std() const {
  return std_;
}
inline void Filter::set_std(float value) {
  set_has_std();
  std_ = value;
}

// repeated .ps.Filter.FixedFloatConfig fixed_point = 4;
inline int Filter::fixed_point_size() const {
  return fixed_point_.size();
}
inline void Filter::clear_fixed_point() {
  fixed_point_.Clear();
}
inline const ::ps::Filter_FixedFloatConfig& Filter::fixed_point(int index) const {
  return fixed_point_.Get(index);
}
inline ::ps::Filter_FixedFloatConfig* Filter::mutable_fixed_point(int index) {
  return fixed_point_.Mutable(index);
}
inline ::ps::Filter_FixedFloatConfig* Filter::add_fixed_point() {
  return fixed_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ps::Filter_FixedFloatConfig >&
Filter::fixed_point() const {
  return fixed_point_;
}
inline ::google::protobuf::RepeatedPtrField< ::ps::Filter_FixedFloatConfig >*
Filter::mutable_fixed_point() {
  return &fixed_point_;
}

// optional uint64 signature = 2;
inline bool Filter::has_signature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Filter::set_has_signature() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Filter::clear_has_signature() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Filter::clear_signature() {
  signature_ = GOOGLE_ULONGLONG(0);
  clear_has_signature();
}
inline ::google::protobuf::uint64 Filter::signature() const {
  return signature_;
}
inline void Filter::set_signature(::google::protobuf::uint64 value) {
  set_has_signature();
  signature_ = value;
}

// repeated uint64 uncompressed_size = 3;
inline int Filter::uncompressed_size_size() const {
  return uncompressed_size_.size();
}
inline void Filter::clear_uncompressed_size() {
  uncompressed_size_.Clear();
}
inline ::google::protobuf::uint64 Filter::uncompressed_size(int index) const {
  return uncompressed_size_.Get(index);
}
inline void Filter::set_uncompressed_size(int index, ::google::protobuf::uint64 value) {
  uncompressed_size_.Set(index, value);
}
inline void Filter::add_uncompressed_size(::google::protobuf::uint64 value) {
  uncompressed_size_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Filter::uncompressed_size() const {
  return uncompressed_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Filter::mutable_uncompressed_size() {
  return &uncompressed_size_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ps

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ps::Filter_Type>() {
  return ::ps::Filter_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2ffilter_2eproto__INCLUDED
